//
//   Copyright 2018-2021  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2"
    }
  }
  dependencies {
    classpath "gradle.plugin.com.selesse:gradle-git-changelog:0.2.0"
  }
}

plugins {
  id 'net.nemerosa.versioning' version '2.14.0'
  id 'io.codearte.nexus-staging' version '0.22.0'
  id 'java'
  id 'java-library'
  id 'idea'
  id 'eclipse'
  id 'maven-publish'
  id 'signing'
}

project.group = 'io.warp10'
project.description = 'Warp 10 Spark Integration'

// If the current tag is set, then it's a new release. Don't add build number
project.version = versioning.info.lastTag + ((versioning.info.tag != null) ? '' : '-' + versioning.info.build)

//
// Repositories for the project dependencies
//

repositories {
    mavenCentral()
}

configurations {
  provided
}

archivesBaseName = 'warp10-spark'

//
// Force versions
//
configurations.all {
  resolutionStrategy {
    // fail eagerly on version conflict (includes transitive dependencies)
    // e.g. multiple different versions of the same dependency (group and name are equal)
    //failOnVersionConflict()

    // force certain versions of dependencies (including transitive)
    //  *append new forced modules:
    // This is needed to force Guava to 15.0 and not 17.0 as Renjin pulls
    // HBase does not work with > 15.0
    force 'com.google.guava:guava:15.0'
  }
}

//
// Project source sets
// MUST appear before 'dependencies' so all source sets are known
//

test {
  useJUnit()
}

sourceSets {
  main {
    compileClasspath = compileClasspath + configurations.provided
  }
}

eclipse.classpath.plusConfigurations += [configurations.provided]  // Eclipse users only

// for IntelliJ users
idea {
  module {
    scopes.PROVIDED.plus += [configurations.provided]
  }
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
  manifest {
        attributes('WarpFleet-Description': project.description)
        attributes('WarpFleet-Group': project.group)
        attributes('WarpFleet-Artifact': project.name)
        attributes('WarpFleet-Version': project.version)
  }

  from('src/main/warpscript') {
    //
    // Only consider macros which are in our namespace
    //
    include project.group + '/' + project.name + '/*.mc2'
    include project.group + '/' + project.name + '/**/*.mc2'
  }

  from('.') {
      include 'README.md'
      include project.group + '-' + project.name + '.conf'
  }
}

// GLOBAL DEPENDENCIES
dependencies {
  //
  // WarpScript
  //

  implementation 'io.warp10:warpscript:2.9.0'

  testCompileOnly 'io.warp10:warpscript:2.9.0'
  testImplementation 'junit:junit:4.12'


  //
  // Apache Spark
  //
  compileOnly 'org.apache.spark:spark-core_2.12:3.1.2'
  compileOnly 'org.apache.spark:spark-sql_2.12:3.1.2'
}

// ECLIPSE
eclipse {
  classpath {
    //customizing the classes output directory:
    defaultOutputDir = file('build-eclipse')

    //default settings for downloading sources and Javadoc:
    downloadSources = true
    downloadJavadoc = false
  }
}

task pack(type: Jar, dependsOn: jar) {
  zip64 = true

  manifest {
    attributes("Implementation-Title": "spark")
    attributes("Implementation-Version": version)
  }

  from {
    configurations.compile.collect {
      it.isDirectory() ? it : zipTree(it).matching {
        exclude { it.toString().contains('servlet-api') }
        exclude { it.toString().contains('jmh') }
        exclude { it.toString().contains('junit') }
        exclude { it.toString().contains('parquet') }
        exclude { it.toString().contains('org.apache.hadoop') }
        exclude { it.toString().contains('org.apache.spark') }
        exclude { it.toString().contains('org.scala') }
      }
    }
  } {
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'about.html'
    exclude 'about_files/**'
    exclude 'plugin.properties'
    exclude 'jetty-dir.css'
  }
  with jar
}

task packAll(type: Jar, dependsOn: pack) {
  zip64 = true
  appendix = 'all'

  from zipTree(pack.archivePath)
  from files(sourceSets.test.resources)
}

task packWithTests(type: Jar, dependsOn: pack) {
  zip64 = true
  appendix = 'tests'

  from zipTree(pack.archivePath)
  from sourceSets.test.output
}

publishing {
  publications {
    spark(MavenPublication) {
      groupId project.group
      artifactId project.name
      version = project.version
      from components.java

      pom {
        name = project.name
        description = project.description
        url = 'https://github.com/senx/' + project.name

        scm {
          connection = 'scm:git:git://github.com/senx/' + project.name
          developerConnection = 'scm:git:ssh://github.com/senx/' + project.name
          url = 'https://github.com/senx/' + project.name
        }

        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id = 'senx'
            name = 'SenX'
            email = 'contact@senx.io'
          }
        }
      }
    }
  }
  repositories {
    if (project.hasProperty('ossrhUsername')) {
      maven {
        url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        credentials {
          username ossrhUsername
          password ossrhPassword
        }
      }
    }
    if (project.hasProperty('nexusUsername')) {
      maven {
        name 'nexus'
        allowInsecureProtocol true
        url "$nexusHost/repository/maven-releases/"
        credentials {
          username nexusUsername
          password nexusPassword
        }
      }
    }
  }
}

artifacts {
    archives jar, javadocJar, sourcesJar
}

if (project.hasProperty('ossrhUsername')) {
  nexusStaging {
    packageGroup = 'io.warp10'
    username ossrhUsername
    password ossrhPassword
  }
}

//
// Artifact Signing
//
if (project.hasProperty('signing.gnupg.keyName')) {
  signing {
        useGpgCmd()
        sign publishing.publications
  }
}

