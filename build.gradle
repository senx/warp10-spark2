//
//   Copyright 2018-2023  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

plugins {
  id 'eclipse'
  id 'idea'
  id 'java-library'
  id 'maven-publish'
  id 'signing'
  id 'io.github.gradle-nexus.publish-plugin' version '2.0.0-rc-1'
}

project.group = 'io.warp10'
project.description = 'Warp 10 Spark Integration'
project.version = getVersionFromGit()

//
// Repositories for the project dependencies
//

repositories {
  mavenCentral()
}

configurations {
  provided
}

//
// Force versions
//
configurations.all {
  resolutionStrategy {
    // fail eagerly on version conflict (includes transitive dependencies)
    // e.g. multiple different versions of the same dependency (group and name are equal)
    //failOnVersionConflict()

    // force certain versions of dependencies (including transitive)
    //  *append new forced modules:
    // This is needed to force Guava to 15.0 and not 17.0 as Renjin pulls
    // HBase does not work with > 15.0
    force 'com.google.guava:guava:15.0'
  }
}

//
// Project source sets
// MUST appear before 'dependencies' so all source sets are known
//

test {
  useJUnit()
}

sourceSets {
  main {
    compileClasspath = compileClasspath + configurations.provided
  }
}

eclipse.classpath.plusConfigurations += [configurations.provided]  // Eclipse users only

// for IntelliJ users
idea {
  module {
    scopes.PROVIDED.plus += [configurations.provided]
  }
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(8)
  }
  withSourcesJar()
  withJavadocJar()
}

jar {
  manifest {
    attributes('WarpFleet-Description': project.description)
    attributes('WarpFleet-Group': project.group)
    attributes('WarpFleet-Artifact': project.name)
    attributes('WarpFleet-Version': project.version)
  }

  from('src/main/warpscript') {
    //
    // Only consider macros which are in our namespace
    //
    include project.group + '/' + project.name + '/*.mc2'
    include project.group + '/' + project.name + '/**/*.mc2'
  }

  from('.') {
      include 'README.md'
      include project.group + '-' + project.name + '.conf'
  }
}

// GLOBAL DEPENDENCIES
dependencies {
  //
  // WarpScript
  //

  implementation 'io.warp10:warpscript:3.0.3'

  testCompileOnly 'io.warp10:warpscript:3.0.3'
  testImplementation 'junit:junit:4.13.2'


  //
  // Apache Spark
  //
  compileOnly 'org.apache.spark:spark-core_2.12:3.1.2'
  compileOnly 'org.apache.spark:spark-sql_2.12:3.1.2'
}

// ECLIPSE
eclipse {
  classpath {
    //customizing the classes output directory:
    defaultOutputDir = file('build-eclipse')

    //default settings for downloading sources and Javadoc:
    downloadSources = true
    downloadJavadoc = false
  }
}


publishing {
  publications {
    jar(MavenPublication) {
      from components.java
    }

    // Configure all POMs
    withType(MavenPublication) {
      pom {
        name = project.name
        description = project.description
        url = 'https://github.com/senx/' + project.name
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            name = 'senx'
            organization = 'SenX'
            organizationUrl = 'https://senx.io'
            email = 'contact@senx.io'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/senx/' + project.name + '.git'
          developerConnection = 'scm:git:ssh://github.com/senx/' + project.name + '.git'
          url = 'https://github.com/senx/' + project.name
        }
      }
    }
  }
  repositories {
    if (project.hasProperty('nexusHost')) {
      maven {
        name = "Nexus"
        def releasesRepoUrl = nexusHost + '/repository/maven-releases/'
        def snapshotsRepoUrl = nexusHost + '/repository/maven-snapshots/'
        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        credentials {
          username = nexusUsername
          password = nexusPassword
        }
      }
    }
  }
}

nexusPublishing {
  repositories {
    if (project.hasProperty('ossrhUsername')) {
      sonatype {
        username = ossrhUsername
        password = ossrhPassword
      }
    }
  }
}

signing {
  useGpgCmd()
  sign publishing.publications
}

def getVersionFromGit() {
  def nogit = System.getProperty("nogit")
  if (null != nogit) {
    // Override version with the property value. To remove the version altogether use '-Dnogit' without value.
    return nogit
  } else {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe', '--tags', '--always'
      standardOutput = stdout
    }
    return stdout.toString().trim()
  }
}
